private final int[] deltaX = {0, 0, -1, 1};
private final int[] deltaY = {-1, 1, 0, 0};

private boolean inBound(
        int[][] grid,
        int x,
        int y
) {
    return x >= 0 && y >= 0 && x < grid.length && y < grid[0].length;
}


while (!queue.isEmpty()) {
    final int currentSize = queue.size();
    for (int size = 0; size < currentSize; size++) {
        final int[] current = queue.poll();
        for (int index = 0; index < 4; index++) {
            final int nextX = current[0] + deltaX[index];
            final int nextY = current[1] + deltaY[index];
            if (inBound(grid, nextX, nextY) &&
                    !visited[nextX][nextY] &&
                    grid[nextX][nextY] == 0) {
                queue.offer(new int[]{nextX, nextY});
                visited[nextX][nextY] = true;

            }
        }
    }
    ++level;
}